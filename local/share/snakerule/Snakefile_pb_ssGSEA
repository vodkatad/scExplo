include: "conf.sk"

# csv to tsv
rule to_tsv:
    input: DATA+'/{sample}'+SUFFIX
    output: '{sample}_pb.tsv.gz'
    shell:
        """
            tr -d '"' < {input} | tr "," "\\t" | gzip > {output}
        """

# map ensembl to entrez
rule to_entrez:
    input: '{sample}_pb.tsv.gz'
    output: '{sample}_entrez.tsv.gz'
    params: tool=BIN_DIR+'/annotationdbi'
    shell:
        """
            {params.tool} -i {input} -o {output} -t ENTREZID -f ENSEMBL -n 1 -d
        """
        
rule check_univocity:
    input: eg='{sample}_pb.tsv.gz', et='{sample}_entrez.tsv.gz'
    output: '{sample}_isok.txt'
    shell:
        """
            zcat {input.eg} | wc -l > {output}
            zcat {input.et} | wc -l >> {output}
        """

# FIXME can we do something better?
# we lose a lot!
rule remove_na_doubles:
    input: '{sample}_entrez.tsv.gz'
    output: '{sample}_entrez_shaved.tsv.gz'
    shell:
        """
            zcat {input} | bawk '$1!=""NA' > {output}.tmp2
            zcat {input} | cut -f 1 | sort | uniq -d > {output}.tmp
            cat {output}.tmp2 | filter_1col 1 -v {output}.tmp >> {output}.tmp3
            gzip -c {output}.tmp3 > {output}
            rm {output}.tmp*
        """

# load msigdb signatures ###############################
## this should be put in task, generalized to entrez/symbol
rule load_signatures:
    input: PRJ_ROOT+'/local/share/data/msigdb/{sign}.all.v7.2.entrez.gmt'
    output: '{sign}.rds'
    params: tool=BIN_DIR+'/getGseaSignatures'
    shell:
        """
            {params.tool} -g {input} -o {output} -c {wildcards.sign}
        """

# rule load_signatures_prova:
#     input: gtm = PRJ_ROOT+'/local/share/data/msigdb/{sign}.v2023.1.Hs.symbols.gmt'
#     output: rds= '{sign}.rds'
#     script: SRC_DIR+'/getGseaSignatures_new.R'


#SC signatures from Nth' Simon
rule fromTsvToCsv_quoted:
    input: PRJ_ROOT+'/local/share/data/msigdb/Lgr5_genelist_sane.csv'
    output: "Lgr5_hs_symbol.tsv"
    shell:
        """
            tr -d '"' < {input} | sed 1d | tr "," "\\t" | bawk '$4 != "" {{print $4}}' | sort | uniq > {output}
        """

rule fromTsvToCsv_unquoted:
    input: PRJ_ROOT+'/local/share/data/msigdb/RSC_gene_signature_sane.csv'
    output: "RSC_hs_symbol.tsv"
    shell:
        """
            cat {input} | sed 1d | tr "," "\\t" | bawk '$5 != "" {{print $5}}' | sort | uniq > {output}
        """

rule fromTsvToCsv_quoted_bis:
    input: PRJ_ROOT+'/local/share/data/msigdb/yap_gregorieff2015_homologs_human.csv'
    output: "yapgregorieff_hs_symbol.tsv"
    shell:
        """
            tr -d '"' < {input} | sed 1d | tr "," "\\t" | bawk '$3 != "" {{print $3}}' | sort | uniq > {output}
        """

rule makeSignRds:
    input: "{sign}_hs_symbol.tsv"
    output: "{sign}_hs_symbol.rds"
    params: tool=BIN_DIR+'/getGseaSignatureFromList'
    shell:
        """
            {params.tool} -g {input} -o {output} -n {wildcards.sign}
        """

rule makeSignCollectioRDS:
    input: "RSC_hs_symbol.rds", "Lgr5_hs_symbol.rds"
    output: "CSC_hs_symbol.rds"
    params: tool=BIN_DIR+'/getGseaCollection', allin=lambda wildcards, input: ','.join(input)
    shell:
        """
            {params.tool} -i {params.allin} -o {output}
        """

rule makeSignCollectioRDS_bis:
    input: "RSC_hs_symbol.rds", "Lgr5_hs_symbol.rds", 'yapgregorieff_hs_symbol.rds'
    output: "allCSC_hs_symbol.rds"
    params: tool=BIN_DIR+'/getGseaCollection', allin=lambda wildcards, input: ','.join(input)
    shell:
        """
            {params.tool} -i {params.allin} -o {output}
        """


rule load_signatures_symbol:
    input: PRJ_ROOT+'/local/share/data/msigdb/{sign}.all.v7.4.symbols.gmt'
    output: '{sign}.symbol.rds'
    params: tool=BIN_DIR+'/getGseaSignatures'
    shell:
        """
            {params.tool} -g {input} -o {output} -c {wildcards.sign}
        """


############################################

# singscore
# TODO understand if we are missing too many genes from the signatures for this approach to work
rule singscore:
    input: expr='{sample}_entrez_shaved.tsv.gz', sign='{sign}.rds'
    output: '{sample}_{sign}.scores.tsv'
    params: tool=BIN_DIR+'/singscore'
    shell:
        """
            {params.tool} -s {input.sign} -o {output} -e {input.expr}
        """

rule gsva:
    input: expr='{sample}_entrez_shaved.tsv.gz', sign='{sign}.rds'
    output: '{sample}_{sign}.{method}-scores.tsv'
    params: tool=BIN_DIR+'/gsva'
    shell:
        """
            {params.tool} -s {input.sign} -o {output} -e {input.expr} -m {wildcards.method}
        """

DIR='../../local/share/data/Alberto_pops'
rule makeSignRdsAlb:
    input: DIR+"/genes_pop_{sample}.txt"
    output: "genes_pop_{sample}.rds"
    params: tool=BIN_DIR+'/getGseaSignatureFromList'
    shell:
        """
            {params.tool} -g {input} -o {output} -n {wildcards.sample}
        """


rule makeSignCollRdsAlb:
    input: "genes_pop_322_CTX_paneth.rds", "genes_pop_322_CTX_WNT.rds", "genes_pop_327_2_CTX_WNT.rds", "genes_pop_542_CTX_EE.rds"
    output: "coll_genes_pop_Alberto.rds"
    params: tool=BIN_DIR+'/getGseaCollection', allin=lambda wildcards, input: ','.join(input)
    shell:
        """
            {params.tool} -i {params.allin} -o {output} 
        """
